services:
  db:
    image: postgres
    restart: always
    volumes:
      - ./pgdata:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: root
      POSTGRES_USER: postgres
      POSTGRES_DB: product
      DB_HOST: host.docker.internal
    ports:
      - "5432:5432"
    networks:
      - db-tier
  pgadmin:
    image: dpage/pgadmin4
    restart: always
    depends_on:
      - db
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: root
    ports:
      - "5050:80"
    networks:
      - db-tier
  product-api:
    build: ./product-api
    restart: always
    depends_on:
      - db
    environment:
      DB_HOST: db
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: root
      DB_NAME: product
    ports:
      - "8080:8080"
    networks:
      - db-tier
  zookeeper:
    image: docker.io/bitnami/zookeeper:3.8
    restart: always
    ports:
      - "2181:2181"
    volumes:
      - "./zoodata:/bitnami/zookeeper"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - app-tier
  kafka:
    image: docker.io/bitnami/kafka:3.1
    restart: always
    ports:
      - "9092:9092"
      - "9093:9093"
    volumes:
      - "./kafdata:/bitnami/kafka"
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://localhost:9093
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT
    depends_on:
      - zookeeper
    networks:
      - app-tier
  product-enricher:
    build: ./product-enricher
    restart: always
    depends_on:
      - kafka
    environment:
      KAFKA_BROKERS: kafka:9092
      KAFKA_CLIENT_ID: product
      KAFKA_GROUP_ID: product-enricher
      KAFKA_PRODUCT_TOPIC: product.v1.production
    networks:
      - app-tier
  product-feed-scheduler:
    build: ./product-feed-scheduler
    restart: always
    environment:
      HOST: '0.0.0.0'
      PORT: 8081
      CRON_TIMEZONE: America/Chicago
      CRON_NOTIFICATIONS_EXPRESSION: 0 8 * * *

networks:
  db-tier:
  app-tier:
    driver: bridge